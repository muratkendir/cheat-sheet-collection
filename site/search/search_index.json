{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Cheat Sheet Collection","text":"<p>Custom-made Cheatsheets or links to some useful cheatsheet documents.</p> <p>The devil is in the details. The \"Gypsy Girl\" is in Zeugma Mosaic Museum</p>"},{"location":"about/","title":"Created for testing purposes","text":""},{"location":"oracledb/oracledb-vs-postgresql-tricks/","title":"OracleDB vs PostgreSQL - Tips and Tricks","text":""},{"location":"oracledb/oracledb-vs-postgresql-tricks/#oracledb-clauses-and-the-orders","title":"OracleDB - Clauses and the orders","text":"<ul> <li>In OracleDB: -- INSERT INTO must be declared before the WITH clause. -- Every (real) table must be called with it's SCHEMA name. -- Every (real) table must be shorten without AS conjunction. -- Don't use Aliases in GROUP BY clause (?). -- If DUAL needed, call it firstly (?). -- User 0/1 rather than True/False. -- Try to not use quotation with table names (Use with schema names). -- Donot use double colon as type casting. Always use CAST(column AS type) expression.</li> </ul>"},{"location":"oracledb/oracledb-vs-postgresql-tricks/#json-array-aggragation-and-concat","title":"JSON Array Aggragation and CONCAT","text":"Command in PostgreSQL Command in OracleDB ARRAY_AGG JSON_ARRAYAGG anyarray[1] JSON_VALUE(anyarray, '$[0]') CONCAT(1,2,3) = '123' CONCAT(CONCAT(1,2),3)='123' ST_Envelope(geometry) SDO_GEOM_MBR(geometry)"},{"location":"oracledb/oracledb-vs-postgresql-tricks/#unsolved-issues","title":"Unsolved issues","text":"Solution in PostgreSQL Solution in OracleDB json_build_object() JSON_OBJECT? array STRARRAY? unnest &amp; array_position unsolved"},{"location":"oracledb/sdo_geometry/","title":"SDO_GEOMETRY Cheatsheet","text":"<p>SDO_GEOMETRY is the data type stores geometries on OracleDB Spatial package.</p> <p>Main structure of the SDO_GEOMETRY object is like below:</p> <pre><code>SDO_GEOMETRY\n  - SDO_GTYPE\n  - SDO_SRID\n  - SDO_POINT\n    - SDO_POINT_TYPE\n  - SDO_ELEM_INFO_ARRAY\n    - SDO_STARTING_OFFSET\n    - SDO_ETYPE\n    - SDO_INTERPRETATION\n  - SDO_ORDINATES \n</code></pre>"},{"location":"oracledb/sdo_geometry/#table-of-sdo_geometry-elements","title":"Table of SDO_GEOMETRY elements","text":"Level Relevant Object Rule(z) Note 0 SDO_GEOMETRY includes SDO_GTYPE, SDO_SRID, SDO_POINT, SDO_ELEM_INFO_ARRAY, SDO_ORDINATES 1 SDO_GTYPE XXXX: First digit stands for Dimension 2,3,4 XXXX: Second digit stands for linear referencing (measure) system 0, 3 (X,Y,M), 4 (X,Y,Z,M) XXXX: last 2 digits stands for geometry types 01: Point, 02: Line/Curve, 03: Polygon/Surface, 07:Multipolygon, 08:Solid, 09: MultiSolid 1 SDO_SRID SRID code of CRS 1 SDO_POINT This object used if SDO_ELEM_INFO and SDO_ORDINATES is NULL In other words, if only points are stored (not with Linear Referencing and as oriented point). 1 SDO_ELEM_INFO_ARRAY includes SDO_STARTING_OFFSET, SDO_ETYPE and SDO_INTERPRETATION 2 SDO_STARTING_OFFSET Offset in ordinates 2 SDO_ETYPE Codes for geometry types 1003: Exterior (CCW) Simple Polygon, 2003: Interior (CW) Simple Polygon, 1005: Exterior Compound Polygon (w ring), 2005: Interior Compound Polygon (w ring), 1006: Exterior Surface (contains at least 1 polygon), 2006: Interior Surface, 1007: Solid 2 SDO_INTERPRETATION If the geometry is compound than it specifies how many triplets are part of the geometry. 1 SDO_ORDINATES lists and represents the order of the ordinates X, Y, Z, M"},{"location":"yaml/yaml-main/","title":"YAML Cheatsheet","text":""},{"location":"yaml/yaml-main/#links","title":"Links","text":"<p>onlineyamltools.com</p>"},{"location":"yaml/yaml-main/#characters-and-rules-table","title":"Characters and Rules Table","text":"Relevant Character(s) Rule(z) Note No more spaces! # (hashtag) for single line commenting true / false returns boolean yes / no , on / off - (hypen/dash+space) for creating sequences (list member) [1, 2, 3] (square bracket) also works for creating lists (pipe) used to write multiline strings and to keep as multline string &gt; (greater than) used to write multiline strings and to converts it to single line string $ (dollar) forwards environment variable into strings {{ }} (double curly bracket) placeholder --- (three dash) used as seperator in multi documents &amp; (ampersand) used to declare an object as anchor (like pointers) * (asteriks) used to call the object with anchor with the same name (called as alias) &lt;&lt;: (x2 less than+colon) refers to an object called with an alias, it is possible to override the predefined attribute. !!str / !!int / !!bool data type casting"},{"location":"yaml/yaml-main/#tricks","title":"Tricks","text":"<p>How to escape special characters in a string?</p>"},{"location":"yaml/yaml-main/#html-entity-escape","title":"HTML Entity Escape","text":"<p>Reserved Characters - Mozilla Developer </p>"},{"location":"yaml/yaml-main/#unicode-escape","title":"Unicode Escape","text":"<p>Unicode Characters Table - Rapid Tables</p>"}]}